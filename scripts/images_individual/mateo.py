# %load /Users/mateo/dsc180a-streetview/gsv
#for digital signature and api key from .env file
import os
import time
from dotenv import load_dotenv
#for google street view image requests
import requests
from PIL import Image
from io import BytesIO
# for generating a key
import hashlib
import hmac
import base64
load_dotenv()
# api key and digital signature variables
api_key = os.getenv('API_KEY')
digi_sig = os.getenv('SECRET')
#!/usr/bin/python
# -*- coding: utf-8 -*-
""" Signs a URL using a URL signing secret """

import hashlib
import hmac
import base64
import urllib.parse as urlparse


def sign_url(input_url=None, secret=None):
#     """ Sign a request URL with a URL signing secret.
#       Usage:
#       from urlsigner import sign_url
#       signed_url = sign_url(input_url=my_url, secret=SECRET)
#       Args:
#       input_url - The URL to sign
#       secret    - Your URL signing secret
#       Returns:
#       The signed request URL
#   """

    if not input_url or not secret:
        raise Exception("Both input_url and secret are required")

    url = urlparse.urlparse(input_url)

    # We only need to sign the path+query part of the string
    url_to_sign = url.path + "?" + url.query

    # Decode the private key into its binary format
    # We need to decode the URL-encoded private key
    decoded_key = base64.urlsafe_b64decode(secret)

    # Create a signature using the private key and the URL-encoded
    # string using HMAC SHA1. This signature will be binary.
    signature = hmac.new(decoded_key, str.encode(url_to_sign), hashlib.sha1)

    # Encode the binary signature into base64 for use within a URL
    encoded_signature = base64.urlsafe_b64encode(signature.digest())

    original_url = url.scheme + "://" + url.netloc + url.path + "?" + url.query

    # Return signed URL
    return original_url + "&signature=" + encoded_signature.decode()

def capture_street_view_image(location, size="600x400", pitch=0, heading=0, fov=90, outpath = 'data/images/', api_key=api_key, secret_key = digi_sig):
    base_url = "https://maps.googleapis.com/maps/api/streetview"
    params = {
        "location": location,  # Latitude and Longitude of the location
        "size": size,  # image size in pixels 
        "heading": heading,  # The compass heading (0 to 360 degrees)
        "pitch": pitch,  # The up or down angle (default is 0)
        "fov": fov,  # The field of view in degrees (default is 90)
        "key": api_key,  # Your Google API key
    }
    # Construct the URL with the parameters
    url = f"{base_url}?"
    for key, value in params.items():
        url += f"{key}={value}&"
    url = url.rstrip('&')  # Remove the trailing '&'

    # Generate and add the signature to the URL
    signature = sign_url(url, secret_key)
    response = requests.get(signature)
    if not os.path.exists(outpath):
        os.makedirs(outpath, exist_ok=True)
    if (response.status_code == 200):
        file_path = outpath+"street_view_image{}.jpg".format(time.time())
        with open(file_path, "wb") as file:
            file.write(response.content)
        response.close()
        # if you want to see the image, uncomment this portion
        #image = Image.open(BytesIO(response.content))
        #image.show()
    else:
        print("Failed to capture Street View image.")
        print(f"Status Code: {response.status_code}")
        print(response.text)

# coords ug
# First
def generate_images(outpath):
    first = [["32.8700,-117.2049648",'600x400',0,12,10],
    ["32.8700,-117.2049648",'600x400',0,15,60],
    ["32.8700,-117.2049648",'600x400',0,15,30],
    ["32.87013,-117.205",'600x400',0,30,60],
    ["32.87013,-117.205",'600x400',0,30,30],
    ["32.87013,-117.205",'600x400',0,30,10],
    ["32.8702,-117.205",'600x400',0,50,30],
    ["32.8702,-117.205",'600x400',0,60,60],
    ["32.8702,-117.205",'600x400',-2,60,10],
    ["32.87025,-117.205",'600x400',0,90,30],
    ["32.87025,-117.205",'600x400',0,90,60],
    ["32.87025,-117.205",'600x400',0,90,20],
    ["32.87035,-117.205",'600x400',0,100,60],
    ["32.87035,-117.205",'600x400',0,100,30],
    ["32.87035,-117.205",'600x400', -3,110,10]]


    # Second
    second = [["32.8700,-117.2049648", '600x400',0,30,60],
    ["32.8700,-117.2049648", '600x400',0,18,10],
    ["32.8700,-117.2049648", '600x400',0,20,30],
    ["32.87013,-117.205", '600x400', 0,40,10],
    ["32.87013,-117.205", '600x400', 0,40,30],
    ["32.87013,-117.205", '600x400', 0,40,60],
    ["32.8702,-117.205",'600x400',0,50,60],
    ["32.8702,-117.205",'600x400', -3,72,10],
    ["32.8702,-117.205",'600x400', -3,72,30],
    ["32.87025,-117.205",'600x400',0,100,60],
    ["32.87025,-117.205",'600x400',0,90,60],
    ["32.87025,-117.205",'600x400',0,90,20],
    ["32.87035,-117.205",'600x400',0,100,60],
    ["32.87035,-117.205",'600x400',0,100,30],
    ["32.87035,-117.205",'600x400', -3,110,10]]

    # Third
    third = [["32.86995,-117.204", '600x400',0,100,100],
    ["32.86995,-117.204", '600x400',0,100,60],
    ["32.86995,-117.204", '600x400', -2, 90,10],
    ["32.87006,-117.204", '600x400',0,110,100],
    ["32.87006,-117.204", '600x400',0,110,60],
    ["32.87006,-117.204", '600x400',0,110,30],
    ["32.87025,-117.204",'600x400',0 ,160,120],
    ["32.87025,-117.204", '600x400', 0,160,60],
    ["32.87025,-117.204",'600x400', -6, 160,30],
    ["32.8704,-117.204", '600x400',0,180,120],
    ["32.8704,-117.204",'600x400',0,180,80],
    ["32.8704,-117.204",'600x400',0,200,30],
    ["32.8703519,-117.2037961",'600x400',0,200,100],
    ["32.8703519,-117.2037961",'600x400',0,200,60],
    ["32.8703519,-117.2037961",'600x400',0,220,30]]

    # Fourth
    fourth = [["32.8704,-117.204", '600x400', -2,290,20],
    ["32.8704,-117.204", '600x400', 0, 300, 60],
    ["32.8704,-117.204", '600x400',0, 300, 120],
    ["32.8704,-117.204", '600x400',0, 320,120],
    ["32.8704,-117.204", '600x400',0, 310,60],
    ["32.8704,-117.204", '600x400', -4,290, 20],
    ["32.87025,-117.204",'600x400',0, 340,120],
    ["32.87025,-117.204",'600x400',0, 340,60],
    ["32.87025,-117.204",'600x400', -4,340,20],
    ["32.87006,-117.204", '600x400',0, 40,100],
    ["32.87006,-117.204", '600x400',0, 40,60],
    ["32.87006,-117.204", '600x400',0, 15,20],
    ["32.8699,-117.204", '600x400',0, 35,60],
    ["32.8699,-117.204", '600x400',0, 35,40],
    ["32.8699,-117.204", '600x400',0, 35,20]]


    # Fifth
    fifth = [["32.8704883,-117.206585", '600x400',0, 80, 30],
    ["32.8704883,-117.206585", '600x400',0, 80, 10],
    ["32.8704883,-117.206585", '600x400',0, 80, 20],
    ["32.8704883,-117.206085", '600x400', 0, 120, 60],
    ["32.8704883,-117.206085", '600x400', 0, 120, 45],
    ["32.8704883,-117.206085", '600x400', 0, 110, 30],
    ["32.8704883,-117.2058585", '600x400', 0, 120, 60],
    ["32.8704883,-117.2058585", '600x400', 0, 120, 50],
    ["32.8704883,-117.2058585", '600x400', 0, 120, 40],
    ["32.8705415,-117.2057755", '600x400', 0, 190, 50],
    ["32.8705415,-117.2057755", '600x400', 0, 180, 80],
    ["32.8705415,-117.2057755", '600x400', 0, 180, 100],
    ["32.8706501,-117.2057069", '600x400', 0, 180, 60],
    ["32.8706501,-117.2057069", '600x400', 0, 180, 30],
    ["32.8706501,-117.2057069", '600x400', 0, 180, 10]]
    # Coords oh

    # Sixth
    sixth = [["32.75371,-117.132",'600x400',0,0,100],
    ["32.75371,-117.132",'600x400',0,0,60],
    ["32.75371,-117.132",'600x400',0,10,30],
    ["32.75378,-117.132", '600x400',0,10,60],
    ["32.75378,-117.132", '600x400',0,10,120],
    ["32.75378,-117.132", '600x400',0,10,100],
    ["32.75381,-117.132", '600x400',0, 90,120],
    ["32.75381,-117.132", '600x400',0, 90,60],
    ["32.75381,-117.132", '600x400',0, 90,100],
    ["32.75399,-117.132", '600x400',0,180,120],
    ["32.75399,-117.132", '600x400',0,190,60],
    ["32.75399,-117.132", '600x400',0,170,20],
    ["32.7542,-117.132", '600x400',0,180,80],
    ["32.7542,-117.132", '600x400',0,170,60],
    ["32.7542,-117.132", '600x400',0,180,30]]

    # Seventh
    seventh = [["32.7542,-117.132", '600x400',0,185,20],
    ["32.7542,-117.132", '600x400',0,185,50],
    ["32.7542,-117.132", '600x400',0,185,80],
    ["32.75399,-117.132", '600x400',0,190,60],
    ["32.75399,-117.132", '600x400',0,190,100],
    ["32.75399,-117.132", '600x400',0,190,120],
    ["32.75381,-117.132", '600x400',0, 270,100],
    ["32.75381,-117.132", '600x400',0, 270,60],
    ["32.75381,-117.132", '600x400',0, 270,120],
    ["32.75377,-117.132", '600x400',0,350,100],
    ["32.75377,-117.132", '600x400',0,350,120],
    ["32.75377,-117.132", '600x400',0,350,60],
    ["32.75371,-117.132",'600x400',0,0,100],
    ["32.75371,-117.132",'600x400',0,0,60],
    ["32.75371,-117.132",'600x400',0,350,30]]


    # Eigth
    eigth = [["32.754707,-117.1305968",'600x400', 4,270,50],
    ["32.754707,-117.1305968",'600x400', 4,270,80],
    ["32.754707,-117.1305968",'600x400', 4,270,30],
    ["32.7547095,-117.1307036",'600x400', 4,290,130],
    ["32.7547095,-117.1307036",'600x400', 4,290,80],
    ["32.7547095,-117.1307036",'600x400', 4,290,50],
    ["32.7546923,-117.1307892",'600x400', 4,350,80],
    ["32.7546923,-117.1307892",'600x400', 4,340,100],
    ["32.7546923,-117.1307892",'600x400', 4,340,130],
    ["32.7547146,-117.1308571",'600x400', 4,70,120],
    ["32.7547146,-117.1308571",'600x400', 4,70,100],
    ["32.7547146,-117.1308571",'600x400', 4,70,80],
    ["32.75490,-117.131", '600x400',0,80,100],
    ["32.75490,-117.131", '600x400',0,80,50],
    ["32.75490,-117.131", '600x400', 4,80,30]]

    # Ninth
    ninth = [["32.7547035,-117.1297276",'600x400', 5,90,100],
    ["32.7547035,-117.1297276",'600x400', 5,90,140],
    ["32.7547035,-117.1297276",'600x400', 5,95,60],
    ["32.7547073,-117.1296208",'600x400', 5,150,70],
    ["32.7547073,-117.1296208",'600x400', 5,150,100],
    ["32.7547073,-117.1296208",'600x400', 5,150,130],
    ["32.7547057,-117.1295105",'600x400', 5,240,100],
    ["32.7547057,-117.1295105",'600x400', 5,250,70],
    ["32.7547057,-117.1295105",'600x400', 5,250,40],
    ["32.7546689,-117.129572",'600x400', 4,270,130],
    ["32.7546689,-117.129572",'600x400', 5,290,100],
    ["32.7546689,-117.129572",'600x400', 5,290,70],
    ["32.754705,-117.1294042",'600x400', 5,260,40],
    ["32.754705,-117.1294042",'600x400', 5,260,70],
    ["32.754705,-117.1294042",'600x400', 5,260,100]]


    # Tenth
    tenth = [["32.754213,-117.1295741",'600x400', 5,25,40],
    ["32.754213,-117.1295741",'600x400', 5,30,60],
    ["32.754213,-117.1295741",'600x400', 5,25,80],
    ["32.7543043,-117.129576",'600x400', 5,30,60],
    ["32.7543043,-117.129576",'600x400', 5,30,80],
    ["32.7543043,-117.129576",'600x400', 5,30,100],
    ["32.7543941,-117.1295772",'600x400', 5,90,100],
    ["32.7543941,-117.1295772",'600x400', 5,90,140],
    ["32.7543941,-117.1295772",'600x400', 5,90,80],
    ["32.7544875,-117.1295757",'600x400', 5,150,100],
    ["32.7544875,-117.1295757",'600x400', 5,150,80],
    ["32.7544875,-117.1295757",'600x400', 5,150,60],
    ["32.7545749,-117.129572",'600x400', 5,170,60],
    ["32.7545749,-117.129572",'600x400', 5,170,40],
    ["32.7545749,-117.129572",'600x400', 5,170,100]]

    structures = [first,second,third,fourth,fifth,sixth,seventh,eigth,ninth,tenth]

    for structure in structures:
        for parama in structure:
            capture_street_view_image(parama[0], parama[1], parama[2], parama[3], parama[4], outpath)
       

if __name__== "__main__":
    generate_images(outpath='data/images/')